using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Z80CPUEmulator.Instructions
{
    public static class Opcode
    {
        public const byte
            NoOperation = 0x00,
            LoadImmediateToBC = 0x01,
            StoreAToAddressInBC = 0x02,
            IncrementBC = 0x03,
            IncrementB = 0x04,
            DecrementB = 0x05,
            LoadImmediateToB = 0x06,
            LeftRotateA = 0x07,
            ExchangeAFWithShadow = 0x08,
            AddBCToHL = 0x09,
            LoadAFromAddressInBC = 0x0A,
            DecrementBC = 0x0B,
            IncrementC = 0x0C,
            DecrementC = 0x0D,
            LoadImmediateToC = 0x0E,
            RightRotateA = 0x0F,

            Loop = 0x10,
            LoadImmediateToDE = 0x11,
            StoreAToAddressInDE = 0x12,
            IncrementDE = 0x13,
            IncrementD = 0x14,
            DecrementD = 0x15,
            LoadImmediateToD = 0x16,
            LeftRotateA9Bit = 0x17,
            JumpRelative = 0x18,
            AddDEToHL = 0x19,
            LoadAFromAddressInDE = 0x1A,
            DecrementDE = 0x1B,
            IncrementE = 0x1C,
            DecrementE = 0x1D,
            LoadImmediateToE = 0x1E,
            RightRotateA9Bit = 0x1F,

            JumpRelativeIfNotZero = 0x20,
            LoadImmediateToHL = 0x21,
            StoreHLToImmediateAddress = 0x22,
            IncrementHL = 0x23,
            IncrementH = 0x24,
            DecrementH = 0x25,
            LoadImmediateToH = 0x26,
            AdjustAForBCDAddAndSub = 0x27, // BCD is Binary Coded Decimal
            JumpRelativeIfZero = 0x28,
            AddHLToHL = 0x29,
            LoadHLFromImmediateAddress = 0x2A,
            DecrementHL = 0x2B,
            IncrementL = 0x2C,
            DecrementL = 0x2D,
            LoadImmediateToL = 0x2E,
            InvertA = 0x2F,

            JumpRelativeIfNotCarry = 0x30,
            LoadImmediateToSP = 0x31,
            StoreAInImmediateAddress = 0x32,
            IncrementSP = 0x33,
            IncrementAddressStoredInHl = 0x34,
            DecrementAddressStoresInHl = 0x35,
            LoadImmediateToAddressStoredInHL = 0x36,
            SetCarryFlag = 0x37,
            JumpRelativeIfCarry = 0x38,
            AddSPToHL = 0x39,
            LoadAFromImmediateAddress = 0x3A,
            DecrementSP = 0x3B,
            IncrementA = 0x3C,
            DecrementA = 0x3D,
            LoadImmediateToA = 0x3E,
            InvertCarry = 0x3F,

            LoadBFromB = 0x40,
            LoadBFromC = 0x41,
            LoadBFromD = 0x42,
            LoadBFromE = 0x43,
            LoadBFromH = 0x44,
            LoadBFromL = 0x45,
            LoadBFromAddressStoredInHL = 0x46,
            LoadBFromA = 0x47,
            LoadCFromB = 0x48,
            LoadCFromC = 0x49,
            LoadCFromD = 0x4A,
            LoadCFromE = 0x4B,
            LoadCFromH = 0x4C,
            LoadCFromL = 0x4D,
            LoadCFromAddressStoredInHL = 0x4E,
            LoadCFromA = 0x4F,

            LoadDFromB = 0x50,
            LoadDFromC = 0x51,
            LoadDFromD = 0x52,
            LoadDFromE = 0x53,
            LoadDFromH = 0x54,
            LoadDFromL = 0x55,
            LoadDFromAddressStoredInHL = 0x56,
            LoadDFromA = 0x57,
            LoadEFromB = 0x58,
            LoadEFromC = 0x59,
            LoadEFromD = 0x5A,
            LoadEFromE = 0x5B,
            LoadEFromH = 0x5C,
            LoadEFromL = 0x5D,
            LoadEFromAddressStoredInHL = 0x5E,
            LoadEFromA = 0x5F,

            LoadHFromB = 0x60,
            LoadHFromC = 0x61,
            LoadHFromD = 0x62,
            LoadHFromE = 0x63,
            LoadHFromH = 0x64,
            LoadHFromL = 0x65,
            LoadHFromAddressStoredInHL = 0x66,
            LoadHFromA = 0x67,
            LoadLFromB = 0x68,
            LoadLFromC = 0x69,
            LoadLFromD = 0x6A,
            LoadLFromE = 0x6B,
            LoadLFromH = 0x6C,
            LoadLFromL = 0x6D,
            LoadLFromAddressStoredInHL = 0x6E,
            LoadLFromA = 0x6F,

            StoreToAddressStoredInHLFromB = 0x70,
            StoreToAddressStoredInHLFromC = 0x71,
            StoreToAddressStoredInHLFromD = 0x72,
            StoreToAddressStoredInHLFromE = 0x73,
            StoreToAddressStoredInHLFromH = 0x74,
            StoreToAddressStoredInHLFromL = 0x75,
            Halt = 0x76,
            StoreToAddressStoredInHLFromA = 0x77,
            LoadAFromB = 0x78,
            LoadAFromC = 0x79,
            LoadAFromD = 0x7A,
            LoadAFromE = 0x7B,
            LoadAFromH = 0x7C,
            LoadAFromL = 0x7D,
            LoadAFromAddressStoredInHL = 0x7E,
            LoadAFromA = 0x7F,

            AddBToA = 0x80,
            AddCToA = 0x81,
            AddDToA = 0x82,
            AddEToA = 0x83,
            AddHToA = 0x84,
            AddLToA = 0x85,
            AddAddressFromHLToA = 0x86,
            AddAToA = 0x87,
            AddCarryBToA = 0x88,
            AddCarryCToA = 0x89,
            AddCarryDToA = 0x8A,
            AddCarryEToA = 0x8B,
            AddCarryHToA = 0x8C,
            AddCarryLToA = 0x8D,
            AddCarryAddressFromHLToA = 0x8E,
            AddCarryAToA = 0x8F,

            SubBFromA = 0x90,
            SubCFromA = 0x91,
            SubDFromA = 0x92,
            SubEFromA = 0x93,
            SubHFromA = 0x94,
            SubLFromA = 0x95,
            SubAddressFromHLFromA = 0x96,
            SubAFromA = 0x97,
            SubCarryBFromA = 0x98,
            SubCarryCFromA = 0x99,
            SubCarryDFromA = 0x9A,
            SubCarryEFromA = 0x9B,
            SubCarryHFromA = 0x9C,
            SubCarryLFromA = 0x9D,
            SubCarryAddressFromHLFromA = 0x9E,
            SubCarryAFromA = 0x9F,

            AndAWithB = 0xA0,
            AndAWithC = 0xA1,
            AndAWithD = 0xA2,
            AndAWithE = 0xA3,
            AndAWithH = 0xA4,
            AndAWithL = 0xA5,
            AndAWithAddressFromHL = 0xA6,
            AndAWithA = 0xA7,
            XorAWithB = 0xA8,
            XorAWithC = 0xA9,
            XorAWithD = 0xAA,
            XorAWithE = 0xAB,
            XorAWithH = 0xAC,
            XorAWithL = 0xAD,
            XorAWithAddressFromHL = 0xAE,
            XorAWithA = 0xAF,

            OrAWithB = 0xB0,
            OrAWithC = 0xB1,
            OrAWithD = 0xB2,
            OrAWithE = 0xB3,
            OrAWithH = 0xB4,
            OrAWithL = 0xB5,
            OrAWithAddressFromHL = 0xB6,
            OrAWithA = 0xB7,
            CompareAWithB = 0xB8,
            CompareAWithC = 0xB9,
            CompareAWithD = 0xBA,
            CompareAWithE = 0xBB,
            CompareAWithH = 0xBC,
            CompareAWithL = 0xBD,
            CompareAWithAddressFromHL = 0xBE,
            CompareAWithA = 0xBF,

            ReturnIfNotZero = 0xC0,
            PopBC = 0xC1,
            JumpIfNotZeroAbsolute = 0xC2,
            JumpAbsolute = 0xC3,
            CallIfNotZeroAbsolute = 0xC4,
            PushBC = 0xC5,
            AddImmediateToA = 0xC6,
            Reset0x00 = 0xC7,
            ReturnIfZero = 0xC8,
            Return = 0xC9,
            JumpIfZeroAbsolute = 0xCA,
            BitInstruction = 0xCB,
            CallIfZeroAbsolute = 0xCC,
            CallAbsolute = 0xCD,
            AddCarryImmediateToA = 0xCE,
            Reset0x08 = 0xCF,

            ReturnIfNotCarry = 0xD0,
            PopDE = 0xD1,
            JumpIfNotCarryAbsolute = 0xD2,
            OutputAToPort = 0xD3,
            CallIfNotCarryAbsolute = 0xD4,
            PushDE = 0xD5,
            SubImmediateFromA = 0xD6,
            Reset0x10 = 0xD7,
            ReturnIfCarry = 0xD8,
            ExchangeBCDEHLWithShadow = 0xD9,
            JumpIfCarryAbsolute = 0xDA,
            InputFromPortToA = 0xDB,
            CallIfCarryAbsolute = 0xDC,
            IXInstruction = 0xDD,
            SubCarryImmediateFromA = 0xDE,
            Reset0x18 = 0xDF,

            ReturnIfNotOverflowOrParity = 0xE0,
            PopHL = 0xE1,
            JumpIfNotOverflowOrParityAbsolute = 0xE2,
            ExchangeStackTopWithHL = 0xE3,
            CallIfNotOverflowOrParityAbsolute = 0xE4,
            PushHL = 0xE5,
            AndImmediateWithA = 0xE6,
            Reset0x20 = 0xE7,
            ReturnIfOverflowOrParity = 0xE8,
            JumpAddressFromHLAbsolute = 0xE9,
            JumpIfOverflowOrParityAbsolute = 0xEA,
            ExchangeDEAndHL = 0xEB,
            CallIfOverflowOrParityAbsolute = 0xEC,
            MiscInstruction = 0xED,
            XorImmediateWithA = 0xEE,
            Reset0x28 = 0xEF,

            ReturnIfNotSign = 0xF0,
            PopAF = 0xF1,
            JumpIfNotSignAbsolute = 0xF2,
            DisableInterrupts = 0xF3,
            CallIfNotSignAbsolute = 0xF4,
            PushAF = 0xF5,
            OrImmediateWithA = 0xF6,
            Reset0x30 = 0xF7,
            ReturnIfSign = 0xF8,
            LoadHLToSP = 0xF9,
            JumpIfSignAbsolute = 0xFA,
            EnableInterrupts = 0xFB,
            CallIfSignAbsolute = 0xFC,
            IYInstruction = 0xFD,
            CompareImmediateWithA = 0xFE,
            Reset0x38 = 0xFF;
    }
}
